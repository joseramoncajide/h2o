/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2017-04-10T08:38:51.619Z
  3.10.4.3
  
  Standalone prediction code with sample test data for GLMModel named GLM_model_R_1491806923590_1

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://10.19.0.5:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://10.19.0.5:54321/3/Models.java/GLM_model_R_1491806923590_1 > GLM_model_R_1491806923590_1.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m GLM_model_R_1491806923590_1.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="GLM_model_R_1491806923590_1", algorithm="glm")
public class GLM_model_R_1491806923590_1 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 82; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_GLM_model_R_1491806923590_1.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* travelers */ null,
    /* avg_session_duration */ null,
    /* read_testimonials */ null,
    /* played_video */ null,
    /* contacts */ null,
    /* mobile */ null,
    /* tablet */ null,
    /* flying_from_Alicante */ null,
    /* flying_from_Barcelona */ null,
    /* flying_from_Lisbon */ null,
    /* flying_from_Madrid */ null,
    /* flying_from_Malaga */ null,
    /* flying_from_Oporto */ null,
    /* flying_from_Paris */ null,
    /* searches */ null,
    /* chat_requests */ null,
    /* Alicante */ null,
    /* Amberes */ null,
    /* Amsterdam */ null,
    /* Barcelona */ null,
    /* Belfast */ null,
    /* Berlin */ null,
    /* Birmingham */ null,
    /* Bologna */ null,
    /* Bordeaux */ null,
    /* Brussels */ null,
    /* Bucarest */ null,
    /* Budapest */ null,
    /* Casablanca */ null,
    /* Cologne */ null,
    /* Copenhagen */ null,
    /* Dublin */ null,
    /* Dusseldorf */ null,
    /* Edimbourg */ null,
    /* Eindhoven */ null,
    /* Frankfurt */ null,
    /* Funchal */ null,
    /* Geneva */ null,
    /* Glasgow */ null,
    /* Hamburg */ null,
    /* Las.Palmas */ null,
    /* Lisbon */ null,
    /* Liverpool */ null,
    /* London */ null,
    /* Lyon */ null,
    /* Madrid */ null,
    /* Malaga */ null,
    /* Mallorca */ null,
    /* Malta */ null,
    /* Manchester */ null,
    /* Marrakech */ null,
    /* Marseille */ null,
    /* Milan */ null,
    /* Munich */ null,
    /* Nantes */ null,
    /* Nice */ null,
    /* Oporto */ null,
    /* Oslo */ null,
    /* Paris */ null,
    /* Pisa */ null,
    /* Ponta.Delgada */ null,
    /* Prague */ null,
    /* Rome */ null,
    /* Rotterdam */ null,
    /* Seville */ null,
    /* Sofia */ null,
    /* Stockholm */ null,
    /* Tanger */ null,
    /* Tenerife */ null,
    /* Toulouse */ null,
    /* Turin */ null,
    /* Valencia */ null,
    /* Vienna */ null,
    /* Vilnius */ null,
    /* Warsaw */ null,
    /* Zurich */ null,
    /* Friday */ null,
    /* Monday */ null,
    /* Saturday */ null,
    /* Thursday */ null,
    /* Tuesday */ null,
    /* Wednesday */ null,
    /* Class */ GLM_model_R_1491806923590_1_ColInfo_82.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = null;
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public GLM_model_R_1491806923590_1() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-2479972788281714900L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    final double [] b = BETA.VALUES;
    for(int i = 0; i < 0; ++i) if(Double.isNaN(data[i])) data[i] = CAT_MODES.VALUES[i];
    for(int i = 0; i < 82; ++i) if(Double.isNaN(data[i + 0])) data[i+0] = NUM_MEANS.VALUES[i];
    double eta = 0.0;
    for(int i = 0; i < CATOFFS.length-1; ++i) {
      int ival = (int)data[i];
      if(ival != data[i]) throw new IllegalArgumentException("categorical value out of range");
      ival += CATOFFS[i];
      if(ival < CATOFFS[i + 1])
        eta += b[ival];
    }
    for(int i = 0; i < b.length-1-0; ++i)
    eta += b[0+i]*data[i];
    eta += b[b.length-1]; // reduce intercept
    double mu = hex.genmodel.GenModel.GLM_logitInv(eta);
    preds[0] = (mu >= 0.05974255404397401) ? 1 : 0; // threshold given by ROC
    preds[1] = 1.0 - mu; // class 0
    preds[2] =       mu; // class 1
    return preds;
  }
    public static class BETA implements java.io.Serializable {
      public static final double[] VALUES = new double[83];
      static {
        BETA_0.fill(VALUES);
      }
      static final class BETA_0 implements java.io.Serializable {
        static final void fill(double[] sa) {
          sa[0] = 0.08624782324641618;
          sa[1] = 0.00167525635990133;
          sa[2] = -0.5786613598734258;
          sa[3] = -0.04899495693380128;
          sa[4] = 1.0444382568832675;
          sa[5] = -0.20259141477215353;
          sa[6] = 0.149349858796871;
          sa[7] = -0.2776953337286791;
          sa[8] = 0.6628405393165079;
          sa[9] = -0.40648484123356154;
          sa[10] = 0.28237263709307553;
          sa[11] = -0.1366596238949429;
          sa[12] = -0.04051619895059701;
          sa[13] = -0.009304891531669498;
          sa[14] = -0.019664258396738715;
          sa[15] = 0.009406007530803326;
          sa[16] = -2.491340027835692;
          sa[17] = -0.5311423741755827;
          sa[18] = 0.05866773091277648;
          sa[19] = -0.10743890020856849;
          sa[20] = 0.05582247088053863;
          sa[21] = 0.02115644127015162;
          sa[22] = -0.9824491108030506;
          sa[23] = -0.1372136583068832;
          sa[24] = -0.08272693852740674;
          sa[25] = 0.007312252204686793;
          sa[26] = -0.24581776816119286;
          sa[27] = -0.1413402276386691;
          sa[28] = -0.11000422585664772;
          sa[29] = 0.08096648912295352;
          sa[30] = -0.08681583043224969;
          sa[31] = -0.6389554146540328;
          sa[32] = 0.0027535791360062947;
          sa[33] = -0.5062222961217546;
          sa[34] = -0.20582602751129012;
          sa[35] = 0.11717587024657677;
          sa[36] = -0.23796209469705892;
          sa[37] = -0.13995919962989561;
          sa[38] = 0.042567826587569656;
          sa[39] = 0.11304790197017503;
          sa[40] = 0.14186064532421946;
          sa[41] = 0.041680820279832796;
          sa[42] = -0.025994265065972702;
          sa[43] = -0.03838439178318439;
          sa[44] = 0.05049373683856277;
          sa[45] = 0.036331533675623376;
          sa[46] = -0.36117180362059786;
          sa[47] = 0.08167033227616399;
          sa[48] = -0.12533461731507267;
          sa[49] = 0.1536221568950843;
          sa[50] = -0.104313347599132;
          sa[51] = -0.005864222953793129;
          sa[52] = -0.02030095916230589;
          sa[53] = -0.3218545634355192;
          sa[54] = -0.1506774696043793;
          sa[55] = 0.043211386774042404;
          sa[56] = -0.02432466264416246;
          sa[57] = 0.09008321026744565;
          sa[58] = -0.022942647452019082;
          sa[59] = -0.02170718500643136;
          sa[60] = 0.03741782328599541;
          sa[61] = 0.5365729844767442;
          sa[62] = -0.0548526209639711;
          sa[63] = 0.09069955206973218;
          sa[64] = -2.0101649244721913;
          sa[65] = 0.029129530588772257;
          sa[66] = -0.08992593381651043;
          sa[67] = -1.3736317722733145;
          sa[68] = -0.07847368653269235;
          sa[69] = -0.07560125335710581;
          sa[70] = 0.0073408710331998046;
          sa[71] = -0.2635977806874689;
          sa[72] = -0.7090094199216443;
          sa[73] = 0.6293743090403601;
          sa[74] = -0.36526427336299594;
          sa[75] = -0.45719025292273296;
          sa[76] = 0.1983634439970385;
          sa[77] = 0.24363160643382634;
          sa[78] = 0.2970075120465759;
          sa[79] = 0.16287968340421027;
          sa[80] = 0.11987066266343133;
          sa[81] = 0.24599358391524534;
          sa[82] = -6.322642670383586;
        }
      }
}
// Imputed numeric values
    static class NUM_MEANS implements java.io.Serializable {
      public static final double[] VALUES = new double[82];
      static {
        NUM_MEANS_0.fill(VALUES);
      }
      static final class NUM_MEANS_0 implements java.io.Serializable {
        static final void fill(double[] sa) {
          sa[0] = 2.1883106735427367;
          sa[1] = 245.86991352250595;
          sa[2] = 0.05535239881231439;
          sa[3] = 0.022357660051049638;
          sa[4] = 0.004011043392196698;
          sa[5] = 0.8426212429025354;
          sa[6] = 0.07361566911496589;
          sa[7] = 0.05576913059332187;
          sa[8] = 0.42531645569620224;
          sa[9] = 0.08390894410584981;
          sa[10] = 0.38485179976037864;
          sa[11] = 0.06757305829035787;
          sa[12] = 0.04796582799395735;
          sa[13] = 0.05600875136740114;
          sa[14] = 1.8614158462259724;
          sa[15] = 19.297140178152837;
          sa[16] = 9.063916236912018E-4;
          sa[17] = 0.012283169245194561;
          sa[18] = 0.055091941449184785;
          sa[19] = 0.0633744855967078;
          sa[20] = 0.01961764859092567;
          sa[21] = 0.16192113351044457;
          sa[22] = 0.0013647965827993957;
          sa[23] = 0.0298796686982341;
          sa[24] = 0.03494295983747461;
          sa[25] = 0.32481116841173124;
          sa[26] = 0.028171068396103557;
          sa[27] = 0.015189873417721522;
          sa[28] = 0.002479554096994322;
          sa[29] = 0.024232953065583172;
          sa[30] = 0.07999166536437985;
          sa[31] = 0.07292806167630354;
          sa[32] = 0.034651247590769395;
          sa[33] = 0.020430275563890193;
          sa[34] = 0.022836901599208214;
          sa[35] = 0.09951554930457888;
          sa[36] = 0.03039016512996822;
          sa[37] = 0.18524769495233623;
          sa[38] = 0.035359691618482056;
          sa[39] = 0.027097984060009378;
          sa[40] = 0.15012762410793348;
          sa[41] = 0.1908006459342602;
          sa[42] = 0.03286971922696255;
          sa[43] = 0.40301088711777927;
          sa[44] = 0.1761525238318485;
          sa[45] = 0.05562327446996929;
          sa[46] = 3.7505860290670416E-4;
          sa[47] = 0.12718653956347345;
          sa[48] = 2.29202479554097E-4;
          sa[49] = 0.06433296869302495;
          sa[50] = 0.07952284211074649;
          sa[51] = 0.03256758868573214;
          sa[52] = 0.2743136948481537;
          sa[53] = 0.03727665781111633;
          sa[54] = 0.021065791529926558;
          sa[55] = 0.07787675157576701;
          sa[56] = 0.32582174298067423;
          sa[57] = 0.04431942491014221;
          sa[58] = 0.3496900557378748;
          sa[59] = 0.010199510340157316;
          sa[60] = 0.04396520289628588;
          sa[61] = 0.004875761837787155;
          sa[62] = 0.24140230244309;
          sa[63] = 0.014325154972131066;
          sa[64] = 9.480648017919468E-4;
          sa[65] = 0.03846434338698756;
          sa[66] = 0.04639266552065426;
          sa[67] = 9.272282127415742E-4;
          sa[68] = 0.08159608272125854;
          sa[69] = 0.14016773454185558;
          sa[70] = 0.1640568838881076;
          sa[71] = 0.023972495702453505;
          sa[72] = 0.010480804292337345;
          sa[73] = 0.002396207740792832;
          sa[74] = 0.02802521227275096;
          sa[75] = 0.01163723498463302;
          sa[76] = 0.2055321143928741;
          sa[77] = 0.25589415012762434;
          sa[78] = 0.23668281502318092;
          sa[79] = 0.21066833359379056;
          sa[80] = 0.2529040995988956;
          sa[81] = 0.2184820544876804;
        }
      }
}
// Imputed categorical values.
    static class CAT_MODES implements java.io.Serializable {
      public static final int[] VALUES = new int[0];
      static {
      }
}
    // Categorical Offsets
    public static final int[] CATOFFS = {0};
}
// The class representing training column names
class NamesHolder_GLM_model_R_1491806923590_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[82];
  static {
    NamesHolder_GLM_model_R_1491806923590_1_0.fill(VALUES);
  }
  static final class NamesHolder_GLM_model_R_1491806923590_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "travelers";
      sa[1] = "avg_session_duration";
      sa[2] = "read_testimonials";
      sa[3] = "played_video";
      sa[4] = "contacts";
      sa[5] = "mobile";
      sa[6] = "tablet";
      sa[7] = "flying_from_Alicante";
      sa[8] = "flying_from_Barcelona";
      sa[9] = "flying_from_Lisbon";
      sa[10] = "flying_from_Madrid";
      sa[11] = "flying_from_Malaga";
      sa[12] = "flying_from_Oporto";
      sa[13] = "flying_from_Paris";
      sa[14] = "searches";
      sa[15] = "chat_requests";
      sa[16] = "Alicante";
      sa[17] = "Amberes";
      sa[18] = "Amsterdam";
      sa[19] = "Barcelona";
      sa[20] = "Belfast";
      sa[21] = "Berlin";
      sa[22] = "Birmingham";
      sa[23] = "Bologna";
      sa[24] = "Bordeaux";
      sa[25] = "Brussels";
      sa[26] = "Bucarest";
      sa[27] = "Budapest";
      sa[28] = "Casablanca";
      sa[29] = "Cologne";
      sa[30] = "Copenhagen";
      sa[31] = "Dublin";
      sa[32] = "Dusseldorf";
      sa[33] = "Edimbourg";
      sa[34] = "Eindhoven";
      sa[35] = "Frankfurt";
      sa[36] = "Funchal";
      sa[37] = "Geneva";
      sa[38] = "Glasgow";
      sa[39] = "Hamburg";
      sa[40] = "Las.Palmas";
      sa[41] = "Lisbon";
      sa[42] = "Liverpool";
      sa[43] = "London";
      sa[44] = "Lyon";
      sa[45] = "Madrid";
      sa[46] = "Malaga";
      sa[47] = "Mallorca";
      sa[48] = "Malta";
      sa[49] = "Manchester";
      sa[50] = "Marrakech";
      sa[51] = "Marseille";
      sa[52] = "Milan";
      sa[53] = "Munich";
      sa[54] = "Nantes";
      sa[55] = "Nice";
      sa[56] = "Oporto";
      sa[57] = "Oslo";
      sa[58] = "Paris";
      sa[59] = "Pisa";
      sa[60] = "Ponta.Delgada";
      sa[61] = "Prague";
      sa[62] = "Rome";
      sa[63] = "Rotterdam";
      sa[64] = "Seville";
      sa[65] = "Sofia";
      sa[66] = "Stockholm";
      sa[67] = "Tanger";
      sa[68] = "Tenerife";
      sa[69] = "Toulouse";
      sa[70] = "Turin";
      sa[71] = "Valencia";
      sa[72] = "Vienna";
      sa[73] = "Vilnius";
      sa[74] = "Warsaw";
      sa[75] = "Zurich";
      sa[76] = "Friday";
      sa[77] = "Monday";
      sa[78] = "Saturday";
      sa[79] = "Thursday";
      sa[80] = "Tuesday";
      sa[81] = "Wednesday";
    }
  }
}
// The class representing column Class
class GLM_model_R_1491806923590_1_ColInfo_82 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    GLM_model_R_1491806923590_1_ColInfo_82_0.fill(VALUES);
  }
  static final class GLM_model_R_1491806923590_1_ColInfo_82_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "No";
      sa[1] = "Yes";
    }
  }
}


